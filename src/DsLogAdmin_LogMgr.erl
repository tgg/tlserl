%%------------------------------------------------------------
%%
%% Implementation stub file
%% 
%% Target: DsLogAdmin_LogMgr
%% Source: /home/tgg/src/hg/tlserl/src/DsLogAdmin.idl
%% IC vsn: 4.2.25
%% 
%% This file is automatically generated. DO NOT EDIT IT.
%%
%%------------------------------------------------------------

-module('DsLogAdmin_LogMgr').
-ic_compiled("4_2_25").


%% Interface functions
-export([list_logs/1, list_logs/2, find_log/2]).
-export([find_log/3, list_logs_by_id/1, list_logs_by_id/2]).

%% Type identification function
-export([typeID/0]).

%% Used to start server
-export([oe_create/0, oe_create_link/0, oe_create/1]).
-export([oe_create_link/1, oe_create/2, oe_create_link/2]).

%% TypeCode Functions and inheritance
-export([oe_tc/1, oe_is_a/1, oe_get_interface/0]).

%% gen server export stuff
-behaviour(gen_server).
-export([init/1, terminate/2, handle_call/3]).
-export([handle_cast/2, handle_info/2, code_change/3]).

-include_lib("orber/include/corba.hrl").


%%------------------------------------------------------------
%%
%% Object interface functions.
%%
%%------------------------------------------------------------



%%%% Operation: list_logs
%% 
%%   Returns: RetVal
%%
list_logs(OE_THIS) ->
    corba:call(OE_THIS, list_logs, [], ?MODULE).

list_logs(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, list_logs, [], ?MODULE, OE_Options).

%%%% Operation: find_log
%% 
%%   Returns: RetVal
%%
find_log(OE_THIS, Id) ->
    corba:call(OE_THIS, find_log, [Id], ?MODULE).

find_log(OE_THIS, OE_Options, Id) ->
    corba:call(OE_THIS, find_log, [Id], ?MODULE, OE_Options).

%%%% Operation: list_logs_by_id
%% 
%%   Returns: RetVal
%%
list_logs_by_id(OE_THIS) ->
    corba:call(OE_THIS, list_logs_by_id, [], ?MODULE).

list_logs_by_id(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, list_logs_by_id, [], ?MODULE, OE_Options).

%%------------------------------------------------------------
%%
%% Inherited Interfaces
%%
%%------------------------------------------------------------
oe_is_a("IDL:omg.org/DsLogAdmin/LogMgr:1.0") -> true;
oe_is_a(_) -> false.

%%------------------------------------------------------------
%%
%% Interface TypeCode
%%
%%------------------------------------------------------------
oe_tc(list_logs) -> 
	{{tk_sequence,{tk_objref,"IDL:omg.org/DsLogAdmin/Log:1.0","Log"},0},
         [],[]};
oe_tc(find_log) -> 
	{{tk_objref,"IDL:omg.org/DsLogAdmin/Log:1.0","Log"},[tk_ulong],[]};
oe_tc(list_logs_by_id) -> 
	{{tk_sequence,tk_ulong,0},[],[]};
oe_tc(_) -> undefined.

oe_get_interface() -> 
	[{"list_logs_by_id", oe_tc(list_logs_by_id)},
	{"find_log", oe_tc(find_log)},
	{"list_logs", oe_tc(list_logs)}].




%%------------------------------------------------------------
%%
%% Object server implementation.
%%
%%------------------------------------------------------------


%%------------------------------------------------------------
%%
%% Function for fetching the interface type ID.
%%
%%------------------------------------------------------------

typeID() ->
    "IDL:omg.org/DsLogAdmin/LogMgr:1.0".


%%------------------------------------------------------------
%%
%% Object creation functions.
%%
%%------------------------------------------------------------

oe_create() ->
    corba:create(?MODULE, "IDL:omg.org/DsLogAdmin/LogMgr:1.0").

oe_create_link() ->
    corba:create_link(?MODULE, "IDL:omg.org/DsLogAdmin/LogMgr:1.0").

oe_create(Env) ->
    corba:create(?MODULE, "IDL:omg.org/DsLogAdmin/LogMgr:1.0", Env).

oe_create_link(Env) ->
    corba:create_link(?MODULE, "IDL:omg.org/DsLogAdmin/LogMgr:1.0", Env).

oe_create(Env, RegName) ->
    corba:create(?MODULE, "IDL:omg.org/DsLogAdmin/LogMgr:1.0", Env, RegName).

oe_create_link(Env, RegName) ->
    corba:create_link(?MODULE, "IDL:omg.org/DsLogAdmin/LogMgr:1.0", Env, RegName).

%%------------------------------------------------------------
%%
%% Init & terminate functions.
%%
%%------------------------------------------------------------

init(Env) ->
%% Call to implementation init
    corba:handle_init('DsLogAdmin_Factory_impl', Env).

terminate(Reason, State) ->
    corba:handle_terminate('DsLogAdmin_Factory_impl', Reason, State).


%%%% Operation: list_logs
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, list_logs, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Factory_impl', list_logs, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: find_log
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, find_log, [Id]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Factory_impl', find_log, [Id], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: list_logs_by_id
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, list_logs_by_id, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Factory_impl', list_logs_by_id, [], OE_State, OE_Context, OE_THIS, false);



%%%% Standard gen_server call handle
%%
handle_call(stop, _, State) ->
    {stop, normal, ok, State};

handle_call(_, _, State) ->
    {reply, catch corba:raise(#'BAD_OPERATION'{minor=1163001857, completion_status='COMPLETED_NO'}), State}.


%%%% Standard gen_server cast handle
%%
handle_cast(stop, State) ->
    {stop, normal, State};

handle_cast(_, State) ->
    {noreply, State}.


%%%% Standard gen_server handles
%%
handle_info(_, State) ->
    {noreply, State}.


code_change(OldVsn, State, Extra) ->
    corba:handle_code_change('DsLogAdmin_Factory_impl', OldVsn, State, Extra).

