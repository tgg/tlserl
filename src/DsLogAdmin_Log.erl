%%------------------------------------------------------------
%%
%% Implementation stub file
%% 
%% Target: DsLogAdmin_Log
%% Source: /home/tgg/src/hg/tlserl/src/DsLogAdmin.idl
%% IC vsn: 4.2.25
%% 
%% This file is automatically generated. DO NOT EDIT IT.
%%
%%------------------------------------------------------------

-module('DsLogAdmin_Log').
-ic_compiled("4_2_25").


%% Interface functions
-export([my_factory/1, my_factory/2, id/1]).
-export([id/2, get_log_qos/1, get_log_qos/2]).
-export([set_log_qos/2, set_log_qos/3, get_max_record_life/1]).
-export([get_max_record_life/2, set_max_record_life/2, set_max_record_life/3]).
-export([get_max_size/1, get_max_size/2, set_max_size/2]).
-export([set_max_size/3, get_current_size/1, get_current_size/2]).
-export([get_n_records/1, get_n_records/2, get_log_full_action/1]).
-export([get_log_full_action/2, set_log_full_action/2, set_log_full_action/3]).
-export([get_administrative_state/1, get_administrative_state/2, set_administrative_state/2]).
-export([set_administrative_state/3, get_forwarding_state/1, get_forwarding_state/2]).
-export([set_forwarding_state/2, set_forwarding_state/3, get_operational_state/1]).
-export([get_operational_state/2, get_interval/1, get_interval/2]).
-export([set_interval/2, set_interval/3, get_availability_status/1]).
-export([get_availability_status/2, get_capacity_alarm_thresholds/1, get_capacity_alarm_thresholds/2]).
-export([set_capacity_alarm_thresholds/2, set_capacity_alarm_thresholds/3, get_week_mask/1]).
-export([get_week_mask/2, set_week_mask/2, set_week_mask/3]).
-export(['query'/3, 'query'/4, retrieve/3]).
-export([retrieve/4, match/3, match/4]).
-export([delete_records/3, delete_records/4, delete_records_by_id/2]).
-export([delete_records_by_id/3, write_records/2, write_records/3]).
-export([write_recordlist/2, write_recordlist/3, set_record_attribute/3]).
-export([set_record_attribute/4, set_records_attribute/4, set_records_attribute/5]).
-export([get_record_attribute/2, get_record_attribute/3, copy/1]).
-export([copy/2, copy_with_id/2, copy_with_id/3]).
-export([flush/1, flush/2]).

%% Type identification function
-export([typeID/0]).

%% Used to start server
-export([oe_create/0, oe_create_link/0, oe_create/1]).
-export([oe_create_link/1, oe_create/2, oe_create_link/2]).

%% TypeCode Functions and inheritance
-export([oe_tc/1, oe_is_a/1, oe_get_interface/0]).

%% gen server export stuff
-behaviour(gen_server).
-export([init/1, terminate/2, handle_call/3]).
-export([handle_cast/2, handle_info/2, code_change/3]).

-include_lib("orber/include/corba.hrl").


%%------------------------------------------------------------
%%
%% Object interface functions.
%%
%%------------------------------------------------------------



%%%% Operation: my_factory
%% 
%%   Returns: RetVal
%%
my_factory(OE_THIS) ->
    corba:call(OE_THIS, my_factory, [], ?MODULE).

my_factory(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, my_factory, [], ?MODULE, OE_Options).

%%%% Operation: id
%% 
%%   Returns: RetVal
%%
id(OE_THIS) ->
    corba:call(OE_THIS, id, [], ?MODULE).

id(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, id, [], ?MODULE, OE_Options).

%%%% Operation: get_log_qos
%% 
%%   Returns: RetVal
%%
get_log_qos(OE_THIS) ->
    corba:call(OE_THIS, get_log_qos, [], ?MODULE).

get_log_qos(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, get_log_qos, [], ?MODULE, OE_Options).

%%%% Operation: set_log_qos
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::UnsupportedQoS
%%
set_log_qos(OE_THIS, Qos) ->
    corba:call(OE_THIS, set_log_qos, [Qos], ?MODULE).

set_log_qos(OE_THIS, OE_Options, Qos) ->
    corba:call(OE_THIS, set_log_qos, [Qos], ?MODULE, OE_Options).

%%%% Operation: get_max_record_life
%% 
%%   Returns: RetVal
%%
get_max_record_life(OE_THIS) ->
    corba:call(OE_THIS, get_max_record_life, [], ?MODULE).

get_max_record_life(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, get_max_record_life, [], ?MODULE, OE_Options).

%%%% Operation: set_max_record_life
%% 
%%   Returns: RetVal
%%
set_max_record_life(OE_THIS, Life) ->
    corba:call(OE_THIS, set_max_record_life, [Life], ?MODULE).

set_max_record_life(OE_THIS, OE_Options, Life) ->
    corba:call(OE_THIS, set_max_record_life, [Life], ?MODULE, OE_Options).

%%%% Operation: get_max_size
%% 
%%   Returns: RetVal
%%
get_max_size(OE_THIS) ->
    corba:call(OE_THIS, get_max_size, [], ?MODULE).

get_max_size(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, get_max_size, [], ?MODULE, OE_Options).

%%%% Operation: set_max_size
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidParam
%%
set_max_size(OE_THIS, Size) ->
    corba:call(OE_THIS, set_max_size, [Size], ?MODULE).

set_max_size(OE_THIS, OE_Options, Size) ->
    corba:call(OE_THIS, set_max_size, [Size], ?MODULE, OE_Options).

%%%% Operation: get_current_size
%% 
%%   Returns: RetVal
%%
get_current_size(OE_THIS) ->
    corba:call(OE_THIS, get_current_size, [], ?MODULE).

get_current_size(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, get_current_size, [], ?MODULE, OE_Options).

%%%% Operation: get_n_records
%% 
%%   Returns: RetVal
%%
get_n_records(OE_THIS) ->
    corba:call(OE_THIS, get_n_records, [], ?MODULE).

get_n_records(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, get_n_records, [], ?MODULE, OE_Options).

%%%% Operation: get_log_full_action
%% 
%%   Returns: RetVal
%%
get_log_full_action(OE_THIS) ->
    corba:call(OE_THIS, get_log_full_action, [], ?MODULE).

get_log_full_action(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, get_log_full_action, [], ?MODULE, OE_Options).

%%%% Operation: set_log_full_action
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidLogFullAction
%%
set_log_full_action(OE_THIS, Action) ->
    corba:call(OE_THIS, set_log_full_action, [Action], ?MODULE).

set_log_full_action(OE_THIS, OE_Options, Action) ->
    corba:call(OE_THIS, set_log_full_action, [Action], ?MODULE, OE_Options).

%%%% Operation: get_administrative_state
%% 
%%   Returns: RetVal
%%
get_administrative_state(OE_THIS) ->
    corba:call(OE_THIS, get_administrative_state, [], ?MODULE).

get_administrative_state(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, get_administrative_state, [], ?MODULE, OE_Options).

%%%% Operation: set_administrative_state
%% 
%%   Returns: RetVal
%%
set_administrative_state(OE_THIS, State) ->
    corba:call(OE_THIS, set_administrative_state, [State], ?MODULE).

set_administrative_state(OE_THIS, OE_Options, State) ->
    corba:call(OE_THIS, set_administrative_state, [State], ?MODULE, OE_Options).

%%%% Operation: get_forwarding_state
%% 
%%   Returns: RetVal
%%
get_forwarding_state(OE_THIS) ->
    corba:call(OE_THIS, get_forwarding_state, [], ?MODULE).

get_forwarding_state(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, get_forwarding_state, [], ?MODULE, OE_Options).

%%%% Operation: set_forwarding_state
%% 
%%   Returns: RetVal
%%
set_forwarding_state(OE_THIS, State) ->
    corba:call(OE_THIS, set_forwarding_state, [State], ?MODULE).

set_forwarding_state(OE_THIS, OE_Options, State) ->
    corba:call(OE_THIS, set_forwarding_state, [State], ?MODULE, OE_Options).

%%%% Operation: get_operational_state
%% 
%%   Returns: RetVal
%%
get_operational_state(OE_THIS) ->
    corba:call(OE_THIS, get_operational_state, [], ?MODULE).

get_operational_state(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, get_operational_state, [], ?MODULE, OE_Options).

%%%% Operation: get_interval
%% 
%%   Returns: RetVal
%%
get_interval(OE_THIS) ->
    corba:call(OE_THIS, get_interval, [], ?MODULE).

get_interval(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, get_interval, [], ?MODULE, OE_Options).

%%%% Operation: set_interval
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidTime, DsLogAdmin::InvalidTimeInterval
%%
set_interval(OE_THIS, Interval) ->
    corba:call(OE_THIS, set_interval, [Interval], ?MODULE).

set_interval(OE_THIS, OE_Options, Interval) ->
    corba:call(OE_THIS, set_interval, [Interval], ?MODULE, OE_Options).

%%%% Operation: get_availability_status
%% 
%%   Returns: RetVal
%%
get_availability_status(OE_THIS) ->
    corba:call(OE_THIS, get_availability_status, [], ?MODULE).

get_availability_status(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, get_availability_status, [], ?MODULE, OE_Options).

%%%% Operation: get_capacity_alarm_thresholds
%% 
%%   Returns: RetVal
%%
get_capacity_alarm_thresholds(OE_THIS) ->
    corba:call(OE_THIS, get_capacity_alarm_thresholds, [], ?MODULE).

get_capacity_alarm_thresholds(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, get_capacity_alarm_thresholds, [], ?MODULE, OE_Options).

%%%% Operation: set_capacity_alarm_thresholds
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidThreshold
%%
set_capacity_alarm_thresholds(OE_THIS, Threshs) ->
    corba:call(OE_THIS, set_capacity_alarm_thresholds, [Threshs], ?MODULE).

set_capacity_alarm_thresholds(OE_THIS, OE_Options, Threshs) ->
    corba:call(OE_THIS, set_capacity_alarm_thresholds, [Threshs], ?MODULE, OE_Options).

%%%% Operation: get_week_mask
%% 
%%   Returns: RetVal
%%
get_week_mask(OE_THIS) ->
    corba:call(OE_THIS, get_week_mask, [], ?MODULE).

get_week_mask(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, get_week_mask, [], ?MODULE, OE_Options).

%%%% Operation: set_week_mask
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidTime, DsLogAdmin::InvalidTimeInterval, DsLogAdmin::InvalidMask
%%
set_week_mask(OE_THIS, Masks) ->
    corba:call(OE_THIS, set_week_mask, [Masks], ?MODULE).

set_week_mask(OE_THIS, OE_Options, Masks) ->
    corba:call(OE_THIS, set_week_mask, [Masks], ?MODULE, OE_Options).

%%%% Operation: 'query'
%% 
%%   Returns: RetVal, I
%%   Raises:  DsLogAdmin::InvalidGrammar, DsLogAdmin::InvalidConstraint
%%
'query'(OE_THIS, Grammar, C) ->
    corba:call(OE_THIS, 'query', [Grammar, C], ?MODULE).

'query'(OE_THIS, OE_Options, Grammar, C) ->
    corba:call(OE_THIS, 'query', [Grammar, C], ?MODULE, OE_Options).

%%%% Operation: retrieve
%% 
%%   Returns: RetVal, I
%%
retrieve(OE_THIS, From_time, How_many) ->
    corba:call(OE_THIS, retrieve, [From_time, How_many], ?MODULE).

retrieve(OE_THIS, OE_Options, From_time, How_many) ->
    corba:call(OE_THIS, retrieve, [From_time, How_many], ?MODULE, OE_Options).

%%%% Operation: match
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidGrammar, DsLogAdmin::InvalidConstraint
%%
match(OE_THIS, Grammar, C) ->
    corba:call(OE_THIS, match, [Grammar, C], ?MODULE).

match(OE_THIS, OE_Options, Grammar, C) ->
    corba:call(OE_THIS, match, [Grammar, C], ?MODULE, OE_Options).

%%%% Operation: delete_records
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidGrammar, DsLogAdmin::InvalidConstraint
%%
delete_records(OE_THIS, Grammar, C) ->
    corba:call(OE_THIS, delete_records, [Grammar, C], ?MODULE).

delete_records(OE_THIS, OE_Options, Grammar, C) ->
    corba:call(OE_THIS, delete_records, [Grammar, C], ?MODULE, OE_Options).

%%%% Operation: delete_records_by_id
%% 
%%   Returns: RetVal
%%
delete_records_by_id(OE_THIS, Ids) ->
    corba:call(OE_THIS, delete_records_by_id, [Ids], ?MODULE).

delete_records_by_id(OE_THIS, OE_Options, Ids) ->
    corba:call(OE_THIS, delete_records_by_id, [Ids], ?MODULE, OE_Options).

%%%% Operation: write_records
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::LogFull, DsLogAdmin::LogOffDuty, DsLogAdmin::LogLocked, DsLogAdmin::LogDisabled
%%
write_records(OE_THIS, Records) ->
    corba:call(OE_THIS, write_records, [Records], ?MODULE).

write_records(OE_THIS, OE_Options, Records) ->
    corba:call(OE_THIS, write_records, [Records], ?MODULE, OE_Options).

%%%% Operation: write_recordlist
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::LogFull, DsLogAdmin::LogOffDuty, DsLogAdmin::LogLocked, DsLogAdmin::LogDisabled
%%
write_recordlist(OE_THIS, List) ->
    corba:call(OE_THIS, write_recordlist, [List], ?MODULE).

write_recordlist(OE_THIS, OE_Options, List) ->
    corba:call(OE_THIS, write_recordlist, [List], ?MODULE, OE_Options).

%%%% Operation: set_record_attribute
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidRecordId, DsLogAdmin::InvalidAttribute
%%
set_record_attribute(OE_THIS, Id, Attr_list) ->
    corba:call(OE_THIS, set_record_attribute, [Id, Attr_list], ?MODULE).

set_record_attribute(OE_THIS, OE_Options, Id, Attr_list) ->
    corba:call(OE_THIS, set_record_attribute, [Id, Attr_list], ?MODULE, OE_Options).

%%%% Operation: set_records_attribute
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidGrammar, DsLogAdmin::InvalidConstraint, DsLogAdmin::InvalidAttribute
%%
set_records_attribute(OE_THIS, Grammar, C, Attr_list) ->
    corba:call(OE_THIS, set_records_attribute, [Grammar, C, Attr_list], ?MODULE).

set_records_attribute(OE_THIS, OE_Options, Grammar, C, Attr_list) ->
    corba:call(OE_THIS, set_records_attribute, [Grammar, C, Attr_list], ?MODULE, OE_Options).

%%%% Operation: get_record_attribute
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidRecordId
%%
get_record_attribute(OE_THIS, Id) ->
    corba:call(OE_THIS, get_record_attribute, [Id], ?MODULE).

get_record_attribute(OE_THIS, OE_Options, Id) ->
    corba:call(OE_THIS, get_record_attribute, [Id], ?MODULE, OE_Options).

%%%% Operation: copy
%% 
%%   Returns: RetVal, Id
%%
copy(OE_THIS) ->
    corba:call(OE_THIS, copy, [], ?MODULE).

copy(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, copy, [], ?MODULE, OE_Options).

%%%% Operation: copy_with_id
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::LogIdAlreadyExists
%%
copy_with_id(OE_THIS, Id) ->
    corba:call(OE_THIS, copy_with_id, [Id], ?MODULE).

copy_with_id(OE_THIS, OE_Options, Id) ->
    corba:call(OE_THIS, copy_with_id, [Id], ?MODULE, OE_Options).

%%%% Operation: flush
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::UnsupportedQoS
%%
flush(OE_THIS) ->
    corba:call(OE_THIS, flush, [], ?MODULE).

flush(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, flush, [], ?MODULE, OE_Options).

%%------------------------------------------------------------
%%
%% Inherited Interfaces
%%
%%------------------------------------------------------------
oe_is_a("IDL:omg.org/DsLogAdmin/Log:1.0") -> true;
oe_is_a(_) -> false.

%%------------------------------------------------------------
%%
%% Interface TypeCode
%%
%%------------------------------------------------------------
oe_tc(my_factory) -> 
	{{tk_objref,"IDL:omg.org/DsLogAdmin/LogMgr:1.0","LogMgr"},[],[]};
oe_tc(id) -> 
	{tk_ulong,[],[]};
oe_tc(get_log_qos) -> 
	{{tk_sequence,tk_ushort,0},[],[]};
oe_tc(set_log_qos) -> 
	{tk_void,[{tk_sequence,tk_ushort,0}],[]};
oe_tc(get_max_record_life) -> 
	{tk_ulong,[],[]};
oe_tc(set_max_record_life) -> 
	{tk_void,[tk_ulong],[]};
oe_tc(get_max_size) -> 
	{tk_ulonglong,[],[]};
oe_tc(set_max_size) -> 
	{tk_void,[tk_ulonglong],[]};
oe_tc(get_current_size) -> 
	{tk_ulonglong,[],[]};
oe_tc(get_n_records) -> 
	{tk_ulonglong,[],[]};
oe_tc(get_log_full_action) -> 
	{tk_ushort,[],[]};
oe_tc(set_log_full_action) -> 
	{tk_void,[tk_ushort],[]};
oe_tc(get_administrative_state) -> 
	{{tk_enum,"IDL:omg.org/DsLogAdmin/AdministrativeState:1.0",
                  "AdministrativeState",
                  ["locked","unlocked"]},
         [],[]};
oe_tc(set_administrative_state) -> 
	{tk_void,[{tk_enum,"IDL:omg.org/DsLogAdmin/AdministrativeState:1.0",
                           "AdministrativeState",
                           ["locked","unlocked"]}],
                 []};
oe_tc(get_forwarding_state) -> 
	{{tk_enum,"IDL:omg.org/DsLogAdmin/ForwardingState:1.0",
                  "ForwardingState",
                  ["on","off"]},
         [],[]};
oe_tc(set_forwarding_state) -> 
	{tk_void,[{tk_enum,"IDL:omg.org/DsLogAdmin/ForwardingState:1.0",
                           "ForwardingState",
                           ["on","off"]}],
                 []};
oe_tc(get_operational_state) -> 
	{{tk_enum,"IDL:omg.org/DsLogAdmin/OperationalState:1.0",
                  "OperationalState",
                  ["disabled","enabled"]},
         [],[]};
oe_tc(get_interval) -> 
	{{tk_struct,"IDL:omg.org/DsLogAdmin/TimeInterval:1.0","TimeInterval",
                    [{"start",tk_ulonglong},{"stop",tk_ulonglong}]},
         [],[]};
oe_tc(set_interval) -> 
	{tk_void,[{tk_struct,"IDL:omg.org/DsLogAdmin/TimeInterval:1.0",
                             "TimeInterval",
                             [{"start",tk_ulonglong},{"stop",tk_ulonglong}]}],
                 []};
oe_tc(get_availability_status) -> 
	{{tk_struct,"IDL:omg.org/DsLogAdmin/AvailabilityStatus:1.0",
                    "AvailabilityStatus",
                    [{"off_duty",tk_boolean},{"log_full",tk_boolean}]},
         [],[]};
oe_tc(get_capacity_alarm_thresholds) -> 
	{{tk_sequence,tk_ushort,0},[],[]};
oe_tc(set_capacity_alarm_thresholds) -> 
	{tk_void,[{tk_sequence,tk_ushort,0}],[]};
oe_tc(get_week_mask) -> 
	{{tk_sequence,
             {tk_struct,"IDL:omg.org/DsLogAdmin/WeekMaskItem:1.0",
                 "WeekMaskItem",
                 [{"days",tk_ushort},
                  {"intervals",
                   {tk_sequence,
                       {tk_struct,
                           "IDL:omg.org/DsLogAdmin/Time24Interval:1.0",
                           "Time24Interval",
                           [{"start",
                             {tk_struct,"IDL:omg.org/DsLogAdmin/Time24:1.0",
                                 "Time24",
                                 [{"hour",tk_ushort},{"minute",tk_ushort}]}},
                            {"stop",
                             {tk_struct,"IDL:omg.org/DsLogAdmin/Time24:1.0",
                                 "Time24",
                                 [{"hour",tk_ushort},{"minute",tk_ushort}]}}]},
                       0}}]},
             0},
         [],[]};
oe_tc(set_week_mask) -> 
	{tk_void,
            [{tk_sequence,
                 {tk_struct,"IDL:omg.org/DsLogAdmin/WeekMaskItem:1.0",
                     "WeekMaskItem",
                     [{"days",tk_ushort},
                      {"intervals",
                       {tk_sequence,
                           {tk_struct,
                               "IDL:omg.org/DsLogAdmin/Time24Interval:1.0",
                               "Time24Interval",
                               [{"start",
                                 {tk_struct,
                                     "IDL:omg.org/DsLogAdmin/Time24:1.0",
                                     "Time24",
                                     [{"hour",tk_ushort},
                                      {"minute",tk_ushort}]}},
                                {"stop",
                                 {tk_struct,
                                     "IDL:omg.org/DsLogAdmin/Time24:1.0",
                                     "Time24",
                                     [{"hour",tk_ushort},
                                      {"minute",tk_ushort}]}}]},
                           0}}]},
                 0}],
            []};
oe_tc('query') -> 
	{{tk_sequence,
             {tk_struct,"IDL:omg.org/DsLogAdmin/LogRecord:1.0","LogRecord",
                 [{"id",tk_ulonglong},
                  {"time",tk_ulonglong},
                  {"attr_list",
                   {tk_sequence,
                       {tk_struct,"IDL:omg.org/DsLogAdmin/NVPair:1.0",
                           "NVPair",
                           [{"name",{tk_string,0}},{"value",tk_any}]},
                       0}},
                  {"info",tk_any}]},
             0},
         [{tk_string,0},{tk_string,0}],
         [{tk_objref,"IDL:omg.org/DsLogAdmin/Iterator:1.0","Iterator"}]};
oe_tc(retrieve) -> 
	{{tk_sequence,
             {tk_struct,"IDL:omg.org/DsLogAdmin/LogRecord:1.0","LogRecord",
                 [{"id",tk_ulonglong},
                  {"time",tk_ulonglong},
                  {"attr_list",
                   {tk_sequence,
                       {tk_struct,"IDL:omg.org/DsLogAdmin/NVPair:1.0",
                           "NVPair",
                           [{"name",{tk_string,0}},{"value",tk_any}]},
                       0}},
                  {"info",tk_any}]},
             0},
         [tk_ulonglong,tk_long],
         [{tk_objref,"IDL:omg.org/DsLogAdmin/Iterator:1.0","Iterator"}]};
oe_tc(match) -> 
	{tk_ulong,[{tk_string,0},{tk_string,0}],[]};
oe_tc(delete_records) -> 
	{tk_ulong,[{tk_string,0},{tk_string,0}],[]};
oe_tc(delete_records_by_id) -> 
	{tk_ulong,[{tk_sequence,tk_ulonglong,0}],[]};
oe_tc(write_records) -> 
	{tk_void,[{tk_sequence,tk_any,0}],[]};
oe_tc(write_recordlist) -> 
	{tk_void,
            [{tk_sequence,
                 {tk_struct,"IDL:omg.org/DsLogAdmin/LogRecord:1.0",
                     "LogRecord",
                     [{"id",tk_ulonglong},
                      {"time",tk_ulonglong},
                      {"attr_list",
                       {tk_sequence,
                           {tk_struct,"IDL:omg.org/DsLogAdmin/NVPair:1.0",
                               "NVPair",
                               [{"name",{tk_string,0}},{"value",tk_any}]},
                           0}},
                      {"info",tk_any}]},
                 0}],
            []};
oe_tc(set_record_attribute) -> 
	{tk_void,
            [tk_ulonglong,
             {tk_sequence,
                 {tk_struct,"IDL:omg.org/DsLogAdmin/NVPair:1.0","NVPair",
                     [{"name",{tk_string,0}},{"value",tk_any}]},
                 0}],
            []};
oe_tc(set_records_attribute) -> 
	{tk_ulong,
            [{tk_string,0},
             {tk_string,0},
             {tk_sequence,
                 {tk_struct,"IDL:omg.org/DsLogAdmin/NVPair:1.0","NVPair",
                     [{"name",{tk_string,0}},{"value",tk_any}]},
                 0}],
            []};
oe_tc(get_record_attribute) -> 
	{{tk_sequence,{tk_struct,"IDL:omg.org/DsLogAdmin/NVPair:1.0","NVPair",
                                 [{"name",{tk_string,0}},{"value",tk_any}]},
                      0},
         [tk_ulonglong],
         []};
oe_tc(copy) -> 
	{{tk_objref,"IDL:omg.org/DsLogAdmin/Log:1.0","Log"},[],[tk_ulong]};
oe_tc(copy_with_id) -> 
	{{tk_objref,"IDL:omg.org/DsLogAdmin/Log:1.0","Log"},[tk_ulong],[]};
oe_tc(flush) -> 
	{tk_void,[],[]};
oe_tc(_) -> undefined.

oe_get_interface() -> 
	[{"flush", oe_tc(flush)},
	{"copy_with_id", oe_tc(copy_with_id)},
	{"copy", oe_tc(copy)},
	{"get_record_attribute", oe_tc(get_record_attribute)},
	{"set_records_attribute", oe_tc(set_records_attribute)},
	{"set_record_attribute", oe_tc(set_record_attribute)},
	{"write_recordlist", oe_tc(write_recordlist)},
	{"write_records", oe_tc(write_records)},
	{"delete_records_by_id", oe_tc(delete_records_by_id)},
	{"delete_records", oe_tc(delete_records)},
	{"match", oe_tc(match)},
	{"retrieve", oe_tc(retrieve)},
	{"query", oe_tc('query')},
	{"set_week_mask", oe_tc(set_week_mask)},
	{"get_week_mask", oe_tc(get_week_mask)},
	{"set_capacity_alarm_thresholds", oe_tc(set_capacity_alarm_thresholds)},
	{"get_capacity_alarm_thresholds", oe_tc(get_capacity_alarm_thresholds)},
	{"get_availability_status", oe_tc(get_availability_status)},
	{"set_interval", oe_tc(set_interval)},
	{"get_interval", oe_tc(get_interval)},
	{"get_operational_state", oe_tc(get_operational_state)},
	{"set_forwarding_state", oe_tc(set_forwarding_state)},
	{"get_forwarding_state", oe_tc(get_forwarding_state)},
	{"set_administrative_state", oe_tc(set_administrative_state)},
	{"get_administrative_state", oe_tc(get_administrative_state)},
	{"set_log_full_action", oe_tc(set_log_full_action)},
	{"get_log_full_action", oe_tc(get_log_full_action)},
	{"get_n_records", oe_tc(get_n_records)},
	{"get_current_size", oe_tc(get_current_size)},
	{"set_max_size", oe_tc(set_max_size)},
	{"get_max_size", oe_tc(get_max_size)},
	{"set_max_record_life", oe_tc(set_max_record_life)},
	{"get_max_record_life", oe_tc(get_max_record_life)},
	{"set_log_qos", oe_tc(set_log_qos)},
	{"get_log_qos", oe_tc(get_log_qos)},
	{"id", oe_tc(id)},
	{"my_factory", oe_tc(my_factory)}].




%%------------------------------------------------------------
%%
%% Object server implementation.
%%
%%------------------------------------------------------------


%%------------------------------------------------------------
%%
%% Function for fetching the interface type ID.
%%
%%------------------------------------------------------------

typeID() ->
    "IDL:omg.org/DsLogAdmin/Log:1.0".


%%------------------------------------------------------------
%%
%% Object creation functions.
%%
%%------------------------------------------------------------

oe_create() ->
    corba:create(?MODULE, "IDL:omg.org/DsLogAdmin/Log:1.0").

oe_create_link() ->
    corba:create_link(?MODULE, "IDL:omg.org/DsLogAdmin/Log:1.0").

oe_create(Env) ->
    corba:create(?MODULE, "IDL:omg.org/DsLogAdmin/Log:1.0", Env).

oe_create_link(Env) ->
    corba:create_link(?MODULE, "IDL:omg.org/DsLogAdmin/Log:1.0", Env).

oe_create(Env, RegName) ->
    corba:create(?MODULE, "IDL:omg.org/DsLogAdmin/Log:1.0", Env, RegName).

oe_create_link(Env, RegName) ->
    corba:create_link(?MODULE, "IDL:omg.org/DsLogAdmin/Log:1.0", Env, RegName).

%%------------------------------------------------------------
%%
%% Init & terminate functions.
%%
%%------------------------------------------------------------

init(Env) ->
%% Call to implementation init
    corba:handle_init('DsLogAdmin_Log_impl', Env).

terminate(Reason, State) ->
    corba:handle_terminate('DsLogAdmin_Log_impl', Reason, State).


%%%% Operation: my_factory
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, my_factory, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', my_factory, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: id
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, id, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', id, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_log_qos
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, get_log_qos, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_log_qos, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: set_log_qos
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::UnsupportedQoS
%%
handle_call({OE_THIS, OE_Context, set_log_qos, [Qos]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', set_log_qos, [Qos], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_max_record_life
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, get_max_record_life, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_max_record_life, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: set_max_record_life
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, set_max_record_life, [Life]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', set_max_record_life, [Life], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_max_size
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, get_max_size, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_max_size, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: set_max_size
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidParam
%%
handle_call({OE_THIS, OE_Context, set_max_size, [Size]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', set_max_size, [Size], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_current_size
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, get_current_size, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_current_size, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_n_records
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, get_n_records, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_n_records, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_log_full_action
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, get_log_full_action, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_log_full_action, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: set_log_full_action
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidLogFullAction
%%
handle_call({OE_THIS, OE_Context, set_log_full_action, [Action]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', set_log_full_action, [Action], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_administrative_state
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, get_administrative_state, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_administrative_state, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: set_administrative_state
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, set_administrative_state, [State]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', set_administrative_state, [State], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_forwarding_state
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, get_forwarding_state, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_forwarding_state, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: set_forwarding_state
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, set_forwarding_state, [State]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', set_forwarding_state, [State], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_operational_state
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, get_operational_state, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_operational_state, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_interval
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, get_interval, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_interval, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: set_interval
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidTime, DsLogAdmin::InvalidTimeInterval
%%
handle_call({OE_THIS, OE_Context, set_interval, [Interval]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', set_interval, [Interval], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_availability_status
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, get_availability_status, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_availability_status, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_capacity_alarm_thresholds
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, get_capacity_alarm_thresholds, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_capacity_alarm_thresholds, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: set_capacity_alarm_thresholds
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidThreshold
%%
handle_call({OE_THIS, OE_Context, set_capacity_alarm_thresholds, [Threshs]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', set_capacity_alarm_thresholds, [Threshs], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_week_mask
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, get_week_mask, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_week_mask, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: set_week_mask
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidTime, DsLogAdmin::InvalidTimeInterval, DsLogAdmin::InvalidMask
%%
handle_call({OE_THIS, OE_Context, set_week_mask, [Masks]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', set_week_mask, [Masks], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: 'query'
%% 
%%   Returns: RetVal, I
%%   Raises:  DsLogAdmin::InvalidGrammar, DsLogAdmin::InvalidConstraint
%%
handle_call({OE_THIS, OE_Context, 'query', [Grammar, C]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', 'query', [Grammar, C], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: retrieve
%% 
%%   Returns: RetVal, I
%%
handle_call({OE_THIS, OE_Context, retrieve, [From_time, How_many]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', retrieve, [From_time, How_many], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: match
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidGrammar, DsLogAdmin::InvalidConstraint
%%
handle_call({OE_THIS, OE_Context, match, [Grammar, C]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', match, [Grammar, C], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: delete_records
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidGrammar, DsLogAdmin::InvalidConstraint
%%
handle_call({OE_THIS, OE_Context, delete_records, [Grammar, C]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', delete_records, [Grammar, C], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: delete_records_by_id
%% 
%%   Returns: RetVal
%%
handle_call({OE_THIS, OE_Context, delete_records_by_id, [Ids]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', delete_records_by_id, [Ids], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: write_records
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::LogFull, DsLogAdmin::LogOffDuty, DsLogAdmin::LogLocked, DsLogAdmin::LogDisabled
%%
handle_call({OE_THIS, OE_Context, write_records, [Records]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', write_records, [Records], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: write_recordlist
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::LogFull, DsLogAdmin::LogOffDuty, DsLogAdmin::LogLocked, DsLogAdmin::LogDisabled
%%
handle_call({OE_THIS, OE_Context, write_recordlist, [List]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', write_recordlist, [List], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: set_record_attribute
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidRecordId, DsLogAdmin::InvalidAttribute
%%
handle_call({OE_THIS, OE_Context, set_record_attribute, [Id, Attr_list]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', set_record_attribute, [Id, Attr_list], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: set_records_attribute
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidGrammar, DsLogAdmin::InvalidConstraint, DsLogAdmin::InvalidAttribute
%%
handle_call({OE_THIS, OE_Context, set_records_attribute, [Grammar, C, Attr_list]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', set_records_attribute, [Grammar, C, Attr_list], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: get_record_attribute
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::InvalidRecordId
%%
handle_call({OE_THIS, OE_Context, get_record_attribute, [Id]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', get_record_attribute, [Id], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: copy
%% 
%%   Returns: RetVal, Id
%%
handle_call({OE_THIS, OE_Context, copy, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', copy, [], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: copy_with_id
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::LogIdAlreadyExists
%%
handle_call({OE_THIS, OE_Context, copy_with_id, [Id]}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', copy_with_id, [Id], OE_State, OE_Context, OE_THIS, false);

%%%% Operation: flush
%% 
%%   Returns: RetVal
%%   Raises:  DsLogAdmin::UnsupportedQoS
%%
handle_call({OE_THIS, OE_Context, flush, []}, _, OE_State) ->
  corba:handle_call('DsLogAdmin_Log_impl', flush, [], OE_State, OE_Context, OE_THIS, false);



%%%% Standard gen_server call handle
%%
handle_call(stop, _, State) ->
    {stop, normal, ok, State};

handle_call(_, _, State) ->
    {reply, catch corba:raise(#'BAD_OPERATION'{minor=1163001857, completion_status='COMPLETED_NO'}), State}.


%%%% Standard gen_server cast handle
%%
handle_cast(stop, State) ->
    {stop, normal, State};

handle_cast(_, State) ->
    {noreply, State}.


%%%% Standard gen_server handles
%%
handle_info(_, State) ->
    {noreply, State}.


code_change(OldVsn, State, Extra) ->
    corba:handle_code_change('DsLogAdmin_Log_impl', OldVsn, State, Extra).

